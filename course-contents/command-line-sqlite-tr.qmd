# Komut satırı SQLite

## SQLite

- Ubuntu gibi bir çok linux kurulumunda yüklü olarak gelir.

- Macintosh'ta eski bir sürümü vardır.
Güncellenmesi tavsiye edilir.
brew kullanılarak kurulması tavsiye edilir.
Ama eğer istenirse, aşağıdaki siteden yüklenebilir.

> brew install sqlite

- Windows'ta scoop kullanılarak kurulması tavsiye edilir. 
Ama eğer istenirse, aşağıdaki siteden yüklenebilir.

> scoop install sqlite 

[sqlite3](https://www.sqlite.org/cli.html)


## SQLite Komut satırı Demo

01. Chinook veri tabanı aç
02. .help ile komut listesini göster
03. .tables ile tabloları göster
04. Tablolardan SELECT ile bilgi almayı göster
05. .headers on ile kolon isimlerin göster veya gösterme
06. .mode ile SELECT çıktısını farklılaştırmayı göster
07. .output ile dosya ortamına SELECT ile aktarım yap
08. .schema ile tablo oluşturma betiklerin göster
09. .dump ile veri tabanı tam kopyalamayı göster
10. .read ile SQL komutu çalıştırmayı göster.
11. .exit ile komut satırında çıkma


## SQLite Komut satırı komutları

:::{.callout-important}
Aşağıdaki komutlarının tümünü derse başlarken öğrenmenize gerek yoktur.
:::

- **.help**
Yardım alınabilecek komut listesini verir.
.help komut adı ile komut hakkında ayrıntılı bilgi verir.


- **.exit**
- **.quit**
- **.q**

Komut satırından çıkış.

- **.version**

Versiyon bilgisi, özellikle bazı komutlar çalışmadığı zaman ilk kontrol edilmesi gereken bilgi.

- **.show**

Çok kullanılan bazı özelliklerin değerlerini gösterir.
En önemli bağlı bulunduğunu veritabanı dosyasınıda gösterir.

- **.headers**

select komutunda başlıkların çıktısını kontrol eder.
Aşağıdaki komutu deneyin.


```sql
SELECT * FROM Employee;
.headers on
SELECT * FROM Employee;
```


- **.output**
Komut çıktılarının ekrana (stdout) veya bir dosyaya olmasını yönetir.

- **.mode**

Çıktının nasıl olacağını kontrol eder.
Aşağıdaki çıktı modları özellikle yararlıdır.

+ cvs
+ box
+ table
+ json
+ insert
+ markdown

Aşağıdaki komutları deneyin.


```sql
.mode box
.headers on
SELECT EmployeeId,FirstName FROM Employee;
```

```sql
.mode json
.headers on
SELECT EmployeeId,FirstName FROM Employee;
```

```sql
.mode insert
.headers on
SELECT EmployeeId,FirstName FROM Employee;
```

- **.excel**

Bir sonraki komut sonucunu excel'de açmanızı sağlar.
Aşağıdaki komutu deneyin.

```sql
.excel
.headers on
SELECT EmployeeId,FirstName FROM Employee;
```


- **.tables**
tablo listesi gösterir.

- **.schema**
veritabanı SQL DDL (veri tanım dili) komut listesini verir.

- **.dump** 
.schema sonucu artı INSERT betiklerini gösterir.

- **.dbconfig**

veri tabanı yapılandırmasını gösterir.

Örneğin buradaki dqs_ddl "" çift tırnak (double quotes) karakterlerinin DDL ve DML komutlarında izin verilip verilmediğini kontrol eder.
[Bakınız SQLite derleme](https://www.sqlite.org/compile.html)


- **.databases**
sqlite komut satırını kullanarak birden fazla veri tabanı dosyasına bağlanabilir.
Aşağıdaki komut ekstra bir veri tabanı dosyasına bağlanmamıza izin verir.

```sql
ATTACH DATABASE filename AS database_name;
```


Bu bağlantı sonrasında, SQL Standardı ŞEMA_ADI.NESNE_ADI isimlendirmesini kullanmamıza izin verir.

.databases komutu hangi veri tabanı dosyalarına bağlı olduğumuzu gösterir.
İlk bağlanılan dosya her zaman main şeması olarak görülür.



- **.save**
- **.backup**
Veritabanı yedeği alınmasını sağlar.
.save komutu .backup'un takma adıdır.
dosya ismi verilirken
Aşağıdaki komutu deneyin.


```bash
.save yedek.sqlite
```

**.once**
Sadece bir sonraki komut çıktısını dosyaya aktarır.

Aşağıdaki komut ile veritabanının tarih ve saat ile yedeğini alıyoruz.
sqlite komut satırı parametre kavramına sahip olmadığı için .once ile çalıştırmak istediğimiz komutu bir dosyaya yazıyor.
Arkasında .read ile bu komutu çalıştırıyoruz.
Aşağıdaki komutu deneyin.


```sql
.once yedekkomutu;
SELECT '.save ' || 
replace(file,'.sqlite',
REPLACE(REPLACE(datetime('now'), ':', '-'),' ','-') 
|| '.sqlite') 
FROM pragma_database_list WHERE seq = 0; 
.read yedekkomutu;
```





- **.shell**
- **.system**
çalıştırıldığu komut satırında komut çalıştırmanıza izin verir.
Örneği



```bash
.shell pwd
```
-- **CD dizinadi**

Bulunduğunuz dizini değiştirir.
Aşağıdaki komutu deneyin.

```bash
.shell pwd
.cd ..
.shell pwd
```

- **.read**
SQL veya sqlite komutlarını bir dosyadan okumanızı sağlar.
Aynı zamanda komutları boru(pipe) | ile gönderebilirsiniz.

Aşağıdaki komutu deneyin

```bash
echo .dump | sqlite3 chinook.sqlite
```

**.load**

genişleme(extension) yüklemenize izin verir.
Genişlemeler SQLite ana çekirdekte olmayan özelliklerin yüklenmesine izin verir.
Bu sayede bu özellikler kullanılabilir.
Genişlemeleri ayrı bir bölümde inceleyeceğiz.



 FILE ?ENTRY?       Load an extension library