# Toplam (Aggregate) fonksiyonları

Aggregate fonksiyonları genellikle group by ve having ile kullanılırlar.
Ama tüm tablo üzerinde de çalışırlar.

{{< include ../course-contents/tables/table-agregate-functions-tr.md >}}



```sql
aggregate_function(DISTINCT|ALL ifade) 
```

kullanılabilir.

Aşağıdaki sorgu 3 farklı değer, 59,57,59 döndürecektir çünkü çalışan tablosunda aynı FirstName değerleri vardır.
Eğer kullanılmazsa ALL varsayılan değerdir.


```sql
SELECT COUNT(c.FirstName), COUNT(DISTINCT c.FirstName), COUNT(ALL c.FirstName)
FROM Customer c;
```


Ifade genellikle bir kolon ismidir ama SQL'in anladığı tüm ifadeler kullanılabilir.
Örneğin aşağıda ismi E ile başlayanlar için 0 veya 1 dönüyor.
Arkasından bu ifade toplanarak kaç tane ismin E ile başladığı görülebiliyor.
Bu ifade yerinde where içinde gördüğümüz <,= IS NULL gibi operatorler kullanılabilir.


```sql
SELECT SUM(c.FirstName LIKE 'E%')
FROM Customer c;
```

**Count**

Aşağıdaki sorgu Müşteri tablosundaki kayıt sayısını getirir.

```sql
SELECT COUNT(*) FROM Customer;
```

Aşağıdaki sorgu her albumdeki parça sayısını göstermektedir.

```sql
SELECT 
t.AlbumId,
COUNT(t.TrackId) AS ParcaSayisi
FROM Track t 
GROUP BY t.AlbumId 
ORDER BY 2
```




**Sum**

Verilen kolon değerlerini toplar.

Aşağıdaki sorgu toplam invoice değerini getirir.

```sql
SELECT SUM(Total) FROM Invoice i;
```

SUM kullanarak belirli bir duruma uyan kayıt sayısı bulunabilir.

```sql
SELECT SUM(c.SupportRepId IS NULL)
,SUM(c.SupportRepId IS NOT NULL)
,SUM(c.FirstName LIKE 'A%')
FROM Customer c;
```

Aşağıdaki sorgu album uzunluğunu  dakika olarak bulur.


```sql
SELECT 
t.AlbumId,
SUM(t.Milliseconds) / 60_000 AS UzunlukDakika
FROM Track t 
GROUP BY t.AlbumId
```


**AVG**

Verilen kolon değerlerininin averajını bulur.

```sql
SELECT AVG(Total) FROM Invoice i;
```

Aşağıdaki sorgu parçaların (track) dakika olarak ortalama süresini bulur.


```sql
SELECT 
t.AlbumId,
ROUND(AVG(t.Milliseconds) / 60_000) AS AverajDakika
FROM Track t 
GROUP BY t.AlbumId
```


**MIN**

Verilen kolon değerlerininin minimum olanını bulur.

```sql
SELECT MIN(Total) FROM Invoice i;
```

**MAX**

Verilen kolon değerlerininin maksimum olanını bulur.

```sql
SELECT MAX(Total) FROM Invoice i;
```

**GROUP_CONCAT**

GROUP_CONCAT(deger, ayraç) verilen degerin non null olanları, ayraç kullanarak, string toplaması (concat) yaparak döndürür. 
Ayraç değeri verilmezse virgul , kabul edilir.


```sql
SELECT GROUP_CONCAT(c.FirstName)
FROM Customer c;
```


```sql
SELECT GROUP_CONCAT(c.FirstName,'|')
FROM Customer c;
```

## Sqlite

TODO EKLE.
https://www.sqlite.org/lang_aggfunc.html
