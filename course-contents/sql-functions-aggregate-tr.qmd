# Toplam (Aggregate) fonksiyonları

Aggregate fonksiyonları genellikle group by ve having ile kullanılırlar.
Ama tüm tablo üzerinde de çalışırlar.

{{< include ../course-contents/tables/table-agregate-functions-tr.md >}}



```sql
aggregate_function(DISTINCT|ALL ifade) 
```

kullanılabilir.

Aşağıdaki sorgu 3 farklı değer, 59,57,59 döndürecektir çünkü çalışan tablosunda aynı FirstName değerleri vardır.
Eğer kullanılmazsa ALL varsayılan değerdir.


```sql
SELECT COUNT(c.FirstName), 
COUNT(DISTINCT c.FirstName), 
COUNT(ALL c.FirstName)
FROM Customer c;
```


Ifade genellikle bir kolon ismidir ama SQL'in anladığı tüm ifadeler kullanılabilir.
Örneğin aşağıda ismi E ile başlayanlar için 0 veya 1 dönüyor.
Arkasından bu ifade toplanarak kaç tane ismin E ile başladığı görülebiliyor.
Bu ifade yerinde where içinde gördüğümüz <,= IS NULL gibi operatorler kullanılabilir.


```sql
SELECT SUM(c.FirstName LIKE 'E%')
FROM Customer c;
```

**Count**

Aşağıdaki sorgu Müşteri tablosundaki kayıt sayısını getirir.

```sql
SELECT COUNT(*) FROM Customer;
```

COUNT(*) ile COUNT(KolonAdi) null değerlerde farklı çalışır.
COUNT(*) tüm değerleri sayarken, COUNT(KolonAdi) sadece null olmayan değerleri sayar.

Aşağıdaki sorgu Müşteri tablosundaki kayıt sayısını doğru getirir çünkü CustomerId kolonu  not null (null'a izin yok) bir kolondur.

```sql
SELECT COUNT(CustomerId) FROM Customer;
```
Ama aşağıdaki sorgu 55 değerini getirecektir çünkü PostalCode null olan satırlar vardır.

```sql
SELECT COUNT(PostalCode) FROM Customer;
```

Aşağıdaki sorgu her albumdeki parça sayısını göstermektedir.

```sql
SELECT 
t.AlbumId,
COUNT(t.TrackId) AS ParcaSayisi
FROM Track t 
GROUP BY t.AlbumId 
ORDER BY 2
```




**SUM**

Verilen kolon değerlerini toplar.

Aşağıdaki sorgu toplam invoice değerini getirir.

```sql
SELECT SUM(Total) FROM Invoice i;
```

SUM kullanarak belirli bir duruma uyan kayıt sayısı bulunabilir.

```sql
SELECT SUM(c.SupportRepId IS NULL)
,SUM(c.SupportRepId IS NOT NULL)
,SUM(c.FirstName LIKE 'A%')
FROM Customer c;
```

Aşağıdaki sorgu album uzunluğunu  dakika olarak bulur.


```sql
SELECT 
t.AlbumId,
SUM(t.Milliseconds) / 60_000 AS UzunlukDakika
FROM Track t 
GROUP BY t.AlbumId
```


**AVG**

Verilen kolon değerlerininin averajını bulur.

```sql
SELECT AVG(Total) FROM Invoice i;
```

Aşağıdaki sorgu parçaların (track) dakika olarak ortalama süresini bulur.


```sql
SELECT 
t.AlbumId,
ROUND(AVG(t.Milliseconds) / 60_000) AS AverajDakika
FROM Track t 
GROUP BY t.AlbumId
```


**MIN**

Verilen kolon değerlerininin minimum olanını bulur.

```sql
SELECT MIN(Total) FROM Invoice i;
```

Aşağıdaki sorgu en kısa parçayı saniye olarak  bulur.

```sql
SELECT 
MIN(t.Milliseconds) / 1_000 AS EnKısaParcaSaniye
FROM Track t 
```


**MAX**

Verilen kolon değerlerininin maksimum olanını bulur.

```sql
SELECT MAX(Total) FROM Invoice i;
```

Aşağıdaki sorgu en uzun parçayı bulur.

```sql
SELECT 
MAX(t.Milliseconds) / 60_000 AS EnUzunParça
FROM Track t 
```



## Sqlite


- **GROUP_CONCAT(X,Y)**
- **STRING_AGG(X,Y)**

GROUP_CONCAT(deger, ayraç) verilen degerin non null olanları, ayraç kullanarak, string toplaması (concat) yaparak döndürür. 
Ayraç değeri verilmezse virgul , kabul edilir.

GROUP_CONCAT ve STRING_AGG aynı fonksiyondur.
Biri diğerinin takma adı (alias) olarak sunulmuştur.
STRING_AGG PostgreSQL ve SQL-Server ile uyumlu olmak için, GROUP_CONCAT ise MySQL ile uyumlu olmak için vardır.



```sql
SELECT GROUP_CONCAT(c.FirstName)
FROM Customer c;
```


```sql
SELECT GROUP_CONCAT(c.FirstName,'|')
FROM Customer c;
```

Aşağıdaki sorgu bir albumdeki parçaların isimleri tek bir string değer olarak döndürür.

```sql
SELECT 
GROUP_CONCAT(t.Name,'|')
FROM Track t 
WHERE t.AlbumId  = 154;
```





- **TOTAL(X)**
- **SUM(X)**

SQL standardına göre, SUM fonksiyonu eğer çalıştığı tüm satırlar null ise null döndürür.
SQLite tasarım problemi olarak gördüğü bu durum için Total isminde bir fonksiyon eklemiştir.


Örnek 1 
```sql
SELECT SUM(Null) AS ResultSum
,TOTAL(Null)  AS ResultTotal
```


```sql
{{< include Labs/Sum-vs-Total.sql >}}
```

- **DECIMAL_SUM(X)**

Kayan noktalı (floating points) sayılar yaklaşık sayılardır.
Bu sayıların toplamında yaklaşım hataları yapılabilir.
Eğer uygulamanız bu hataları kabul edemez ise, örneğin para hesapları yapılıyorsa, bu durumda bu fonksiyonu kullanmalısınız.
Bu fonksiyon normalde SQLite ile gelmez.
Ayrıca yüklenebilen genişleme (loadable extension) olarak eklenmesi gerekir.
SQLite extension bölümüne bakınız.
TODO link ekle.





- [sqlite toplam fonksiyonları yardım dokumanı](https://www.sqlite.org/lang_aggfunc.html)