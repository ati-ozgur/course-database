# SQL Subqueries

## Subquery single value

If a query returns only a single value, we could use this as subquery in sql staments where we would use a scalar value.

**Example 1**

Lets say, we would like to find second largest invoice in our system.
We could write below two queries to find this information

```sql
SELECT MAX(Total) FROM Invoice
```
This would return value of 25.86.
That is largest invoice.
Using this we could write following query to find second largest invoice.

```sql
SELECT MAX(Total) FROM Invoice
WHERE Total < 25.86
```

With this query, we get our second largest invoice total as 23.86.

But we could write this two queries as one query.
Since we are using < operator, we could first query as subquery in the second query.
In the second query, we replace invoice total of **25.86**, with parentheses and put first query inside them.


```sql
SELECT MAX(Total) FROM Invoice
WHERE Total < (SELECT MAX(Total) FROM Invoice)
```
This query will bring us same information as before.



## Subquery list of values

For IN operator which expect list of values , we could use also sub queries.
These type of queries, sometimes replace joins for more readable versions.

I would like to know top 10 customers who are making the most purchases.

First lets write two query version and change it to sub query.

```sql
SELECT CustomerId,SUM(Total) as TotalInvoice FROM Invoice
GROUP BY CustomerId
ORDER BY TotalInvoice DESC
```
This gives me following result.

![top customers with most purchases](images/top-customers-with-most-purchases.png)

I could copy paste, customer id values and put them in a list, like following.

> (6, 26, 57, 45, 46, 24, 28, 37, 7, 25)

Then I could use this list in a second query.

```sql
SELECT * FROM Customer c WHERE c.CustomerId  IN (6, 26, 57, 45, 46, 24, 28, 37, 7, 25)
```

But we could also, write this one in sub query.
First query  will be inputted to second query IN().
We also modify first query to use limit so that only top 10 customers will be shown.

```sql
SELECT * FROM Customer c WHERE c.CustomerId  IN (
SELECT CustomerId, SUM(Total) as TotalInvoice FROM Invoice
GROUP BY CustomerId
ORDER BY  TotalInvoice DESC
LIMIT 10
)
```

Well, if we run this query, we get following error.

```sql
SQL Error [1]: [SQLITE_ERROR] SQL error or missing database (sub-select returns 2 columns - expected 1)
```

Our first query returns 2 columns but IN expects only one.
We could change our first query so that it returns only customer id in following way.
We do not have to also select SUM(Total), we could only use it ORDER BY like following sql.

```sql
SELECT CustomerId FROM Invoice
GROUP BY CustomerId
ORDER BY  SUM(Total) DESC
LIMIT 10
```

Then, our complete query will be following.


```sql
SELECT * FROM Customer c WHERE c.CustomerId  IN (
SELECT CustomerId FROM Invoice
GROUP BY CustomerId
ORDER BY  SUM(Total) DESC
LIMIT 10
)
```

## Subquery rows

replace a join with a subquery


## Subquery FROM

